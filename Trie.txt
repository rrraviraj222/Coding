class Node
{
    Node *links[26];
    bool isEndOfWord = false;

    public :
    bool containsChar(char ch)
    {
        if(links[ch-'a'] != NULL)
        {
            return true;
        }
        else
        {
            return false;
        }
    }


    Node * getChildNode(char ch)
    {
        return links[ch-'a'];
    }

    void putChar(char ch, Node*child)
    {
        links[ch-'a'] = child;
    }

    bool isEndWord()
    {
        return isEndOfWord;
    }
    
    void setEndWordFlag()
    {
        isEndOfWord = true;
    }
};

class Trie {
    Node * root;
public:
    Trie() {
        root = new Node();
    }
    
    FunCtionCall()
    {
      char ch = 'x';
      Node *node = root;
      node->putChar(ch,new Node());
      node -> setEndWordFlag();
      var x = node->containChar(ch);
      var y = node->isEndWord();
      node = node->getChildNode(ch);
    }    
};
